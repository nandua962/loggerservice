// Code generated by MockGen. DO NOT EDIT.
// Source: utility/internal/repo (interfaces: LanguageRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entities "utility/internal/entities"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/tuneverse/toolkit/models"
)

// MockLanguageRepoImply is a mock of LanguageRepoImply interface.
type MockLanguageRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageRepoImplyMockRecorder
}

// MockLanguageRepoImplyMockRecorder is the mock recorder for MockLanguageRepoImply.
type MockLanguageRepoImplyMockRecorder struct {
	mock *MockLanguageRepoImply
}

// NewMockLanguageRepoImply creates a new mock instance.
func NewMockLanguageRepoImply(ctrl *gomock.Controller) *MockLanguageRepoImply {
	mock := &MockLanguageRepoImply{ctrl: ctrl}
	mock.recorder = &MockLanguageRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageRepoImply) EXPECT() *MockLanguageRepoImplyMockRecorder {
	return m.recorder
}

// GetLanguageCodeExists mocks base method.
func (m *MockLanguageRepoImply) GetLanguageCodeExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageCodeExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguageCodeExists indicates an expected call of GetLanguageCodeExists.
func (mr *MockLanguageRepoImplyMockRecorder) GetLanguageCodeExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageCodeExists", reflect.TypeOf((*MockLanguageRepoImply)(nil).GetLanguageCodeExists), arg0, arg1)
}

// GetLanguages mocks base method.
func (m *MockLanguageRepoImply) GetLanguages(arg0 context.Context, arg1 entities.LangParams, arg2 entities.Pagination, arg3 entities.Validation, arg4 map[string]models.ErrorResponse) ([]*entities.Language, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguages", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entities.Language)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLanguages indicates an expected call of GetLanguages.
func (mr *MockLanguageRepoImplyMockRecorder) GetLanguages(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguages", reflect.TypeOf((*MockLanguageRepoImply)(nil).GetLanguages), arg0, arg1, arg2, arg3, arg4)
}
