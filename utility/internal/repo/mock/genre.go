// Code generated by MockGen. DO NOT EDIT.
// Source: utility/internal/repo (interfaces: GenreRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entities "utility/internal/entities"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "gitlab.com/tuneverse/toolkit/models"
)

// MockGenreRepoImply is a mock of GenreRepoImply interface.
type MockGenreRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockGenreRepoImplyMockRecorder
}

// MockGenreRepoImplyMockRecorder is the mock recorder for MockGenreRepoImply.
type MockGenreRepoImplyMockRecorder struct {
	mock *MockGenreRepoImply
}

// NewMockGenreRepoImply creates a new mock instance.
func NewMockGenreRepoImply(ctrl *gomock.Controller) *MockGenreRepoImply {
	mock := &MockGenreRepoImply{ctrl: ctrl}
	mock.recorder = &MockGenreRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenreRepoImply) EXPECT() *MockGenreRepoImplyMockRecorder {
	return m.recorder
}

// CreateGenre mocks base method.
func (m *MockGenreRepoImply) CreateGenre(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockGenreRepoImplyMockRecorder) CreateGenre(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockGenreRepoImply)(nil).CreateGenre), arg0, arg1, arg2)
}

// DeleteGenre mocks base method.
func (m *MockGenreRepoImply) DeleteGenre(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGenre", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGenre indicates an expected call of DeleteGenre.
func (mr *MockGenreRepoImplyMockRecorder) DeleteGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenre", reflect.TypeOf((*MockGenreRepoImply)(nil).DeleteGenre), arg0, arg1)
}

// GenreNameExists mocks base method.
func (m *MockGenreRepoImply) GenreNameExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenreNameExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenreNameExists indicates an expected call of GenreNameExists.
func (mr *MockGenreRepoImplyMockRecorder) GenreNameExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenreNameExists", reflect.TypeOf((*MockGenreRepoImply)(nil).GenreNameExists), arg0, arg1)
}

// GetGenres mocks base method.
func (m *MockGenreRepoImply) GetGenres(arg0 context.Context, arg1 entities.Params, arg2 entities.Pagination, arg3 entities.Validation, arg4 map[string]models.ErrorResponse) ([]*entities.Genre, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entities.Genre)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGenres indicates an expected call of GetGenres.
func (mr *MockGenreRepoImplyMockRecorder) GetGenres(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockGenreRepoImply)(nil).GetGenres), arg0, arg1, arg2, arg3, arg4)
}

// GetGenresByID mocks base method.
func (m *MockGenreRepoImply) GetGenresByID(arg0 context.Context, arg1 string) (entities.GenreDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenresByID", arg0, arg1)
	ret0, _ := ret[0].(entities.GenreDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenresByID indicates an expected call of GetGenresByID.
func (mr *MockGenreRepoImplyMockRecorder) GetGenresByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenresByID", reflect.TypeOf((*MockGenreRepoImply)(nil).GetGenresByID), arg0, arg1)
}

// IsDuplicateExists mocks base method.
func (m *MockGenreRepoImply) IsDuplicateExists(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDuplicateExists", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDuplicateExists indicates an expected call of IsDuplicateExists.
func (mr *MockGenreRepoImplyMockRecorder) IsDuplicateExists(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDuplicateExists", reflect.TypeOf((*MockGenreRepoImply)(nil).IsDuplicateExists), arg0, arg1, arg2, arg3)
}

// IsGenreExists mocks base method.
func (m *MockGenreRepoImply) IsGenreExists(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGenreExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsGenreExists indicates an expected call of IsGenreExists.
func (mr *MockGenreRepoImplyMockRecorder) IsGenreExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGenreExists", reflect.TypeOf((*MockGenreRepoImply)(nil).IsGenreExists), arg0, arg1)
}

// UpdateGenre mocks base method.
func (m *MockGenreRepoImply) UpdateGenre(arg0 context.Context, arg1 entities.Genre, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenre indicates an expected call of UpdateGenre.
func (mr *MockGenreRepoImplyMockRecorder) UpdateGenre(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockGenreRepoImply)(nil).UpdateGenre), arg0, arg1, arg2)
}
