// Code generated by MockGen. DO NOT EDIT.
// Source: utility/internal/repo (interfaces: RoleRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entities "utility/internal/entities"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "gitlab.com/tuneverse/toolkit/models"
)

// MockRoleRepoImply is a mock of RoleRepoImply interface.
type MockRoleRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepoImplyMockRecorder
}

// MockRoleRepoImplyMockRecorder is the mock recorder for MockRoleRepoImply.
type MockRoleRepoImplyMockRecorder struct {
	mock *MockRoleRepoImply
}

// NewMockRoleRepoImply creates a new mock instance.
func NewMockRoleRepoImply(ctrl *gomock.Controller) *MockRoleRepoImply {
	mock := &MockRoleRepoImply{ctrl: ctrl}
	mock.recorder = &MockRoleRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepoImply) EXPECT() *MockRoleRepoImplyMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleRepoImply) CreateRole(arg0 context.Context, arg1 entities.Role, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleRepoImplyMockRecorder) CreateRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleRepoImply)(nil).CreateRole), arg0, arg1, arg2)
}

// DeleteRoles mocks base method.
func (m *MockRoleRepoImply) DeleteRoles(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoles", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoles indicates an expected call of DeleteRoles.
func (mr *MockRoleRepoImplyMockRecorder) DeleteRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoles", reflect.TypeOf((*MockRoleRepoImply)(nil).DeleteRoles), arg0, arg1)
}

// GetRoleByID mocks base method.
func (m *MockRoleRepoImply) GetRoleByID(arg0 context.Context, arg1 string) (entities.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", arg0, arg1)
	ret0, _ := ret[0].(entities.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockRoleRepoImplyMockRecorder) GetRoleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockRoleRepoImply)(nil).GetRoleByID), arg0, arg1)
}

// GetRoles mocks base method.
func (m *MockRoleRepoImply) GetRoles(arg0 context.Context, arg1 entities.Params, arg2 entities.Pagination, arg3 entities.Validation, arg4 map[string]models.ErrorResponse) ([]*entities.Role, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entities.Role)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockRoleRepoImplyMockRecorder) GetRoles(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockRoleRepoImply)(nil).GetRoles), arg0, arg1, arg2, arg3, arg4)
}

// IsDuplicateExists mocks base method.
func (m *MockRoleRepoImply) IsDuplicateExists(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDuplicateExists", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDuplicateExists indicates an expected call of IsDuplicateExists.
func (mr *MockRoleRepoImplyMockRecorder) IsDuplicateExists(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDuplicateExists", reflect.TypeOf((*MockRoleRepoImply)(nil).IsDuplicateExists), arg0, arg1, arg2, arg3)
}

// IsRoleExists mocks base method.
func (m *MockRoleRepoImply) IsRoleExists(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRoleExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsRoleExists indicates an expected call of IsRoleExists.
func (mr *MockRoleRepoImplyMockRecorder) IsRoleExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRoleExists", reflect.TypeOf((*MockRoleRepoImply)(nil).IsRoleExists), arg0, arg1)
}

// RoleNameExists mocks base method.
func (m *MockRoleRepoImply) RoleNameExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleNameExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleNameExists indicates an expected call of RoleNameExists.
func (mr *MockRoleRepoImplyMockRecorder) RoleNameExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleNameExists", reflect.TypeOf((*MockRoleRepoImply)(nil).RoleNameExists), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockRoleRepoImply) UpdateRole(arg0 context.Context, arg1 entities.Role, arg2 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleRepoImplyMockRecorder) UpdateRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleRepoImply)(nil).UpdateRole), arg0, arg1, arg2)
}
