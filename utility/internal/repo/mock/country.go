// Code generated by MockGen. DO NOT EDIT.
// Source: utility/internal/repo (interfaces: CountryRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entities "utility/internal/entities"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/tuneverse/toolkit/models"
)

// MockCountryRepoImply is a mock of CountryRepoImply interface.
type MockCountryRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRepoImplyMockRecorder
}

// MockCountryRepoImplyMockRecorder is the mock recorder for MockCountryRepoImply.
type MockCountryRepoImplyMockRecorder struct {
	mock *MockCountryRepoImply
}

// NewMockCountryRepoImply creates a new mock instance.
func NewMockCountryRepoImply(ctrl *gomock.Controller) *MockCountryRepoImply {
	mock := &MockCountryRepoImply{ctrl: ctrl}
	mock.recorder = &MockCountryRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryRepoImply) EXPECT() *MockCountryRepoImplyMockRecorder {
	return m.recorder
}

// CheckCountryExists mocks base method.
func (m *MockCountryRepoImply) CheckCountryExists(arg0 context.Context, arg1 entities.IsoParam) (entities.CountryExists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCountryExists", arg0, arg1)
	ret0, _ := ret[0].(entities.CountryExists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCountryExists indicates an expected call of CheckCountryExists.
func (mr *MockCountryRepoImplyMockRecorder) CheckCountryExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCountryExists", reflect.TypeOf((*MockCountryRepoImply)(nil).CheckCountryExists), arg0, arg1)
}

// CheckStateExists mocks base method.
func (m *MockCountryRepoImply) CheckStateExists(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStateExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckStateExists indicates an expected call of CheckStateExists.
func (mr *MockCountryRepoImplyMockRecorder) CheckStateExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStateExists", reflect.TypeOf((*MockCountryRepoImply)(nil).CheckStateExists), arg0, arg1, arg2)
}

// GetAllCountryCodes mocks base method.
func (m *MockCountryRepoImply) GetAllCountryCodes(arg0 context.Context) (entities.IsoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCountryCodes", arg0)
	ret0, _ := ret[0].(entities.IsoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCountryCodes indicates an expected call of GetAllCountryCodes.
func (mr *MockCountryRepoImplyMockRecorder) GetAllCountryCodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCountryCodes", reflect.TypeOf((*MockCountryRepoImply)(nil).GetAllCountryCodes), arg0)
}

// GetCountries mocks base method.
func (m *MockCountryRepoImply) GetCountries(arg0 context.Context, arg1 entities.Params, arg2 entities.Pagination, arg3 entities.Validation, arg4 map[string]models.ErrorResponse) ([]*entities.GeographicInfo, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountries", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entities.GeographicInfo)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCountries indicates an expected call of GetCountries.
func (mr *MockCountryRepoImplyMockRecorder) GetCountries(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockCountryRepoImply)(nil).GetCountries), arg0, arg1, arg2, arg3, arg4)
}

// GetStatesOfCountry mocks base method.
func (m *MockCountryRepoImply) GetStatesOfCountry(arg0 context.Context, arg1 entities.Params, arg2 entities.Pagination, arg3 map[string]models.ErrorResponse, arg4 int64, arg5 entities.Validation) ([]*entities.GeographicInfo, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatesOfCountry", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*entities.GeographicInfo)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatesOfCountry indicates an expected call of GetStatesOfCountry.
func (mr *MockCountryRepoImplyMockRecorder) GetStatesOfCountry(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatesOfCountry", reflect.TypeOf((*MockCountryRepoImply)(nil).GetStatesOfCountry), arg0, arg1, arg2, arg3, arg4, arg5)
}
