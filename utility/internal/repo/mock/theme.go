// Code generated by MockGen. DO NOT EDIT.
// Source: utility/internal/repo (interfaces: ThemeRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entities "utility/internal/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockThemeRepoImply is a mock of ThemeRepoImply interface.
type MockThemeRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockThemeRepoImplyMockRecorder
}

// MockThemeRepoImplyMockRecorder is the mock recorder for MockThemeRepoImply.
type MockThemeRepoImplyMockRecorder struct {
	mock *MockThemeRepoImply
}

// NewMockThemeRepoImply creates a new mock instance.
func NewMockThemeRepoImply(ctrl *gomock.Controller) *MockThemeRepoImply {
	mock := &MockThemeRepoImply{ctrl: ctrl}
	mock.recorder = &MockThemeRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThemeRepoImply) EXPECT() *MockThemeRepoImplyMockRecorder {
	return m.recorder
}

// GetThemeByID mocks base method.
func (m *MockThemeRepoImply) GetThemeByID(arg0 context.Context, arg1 string) (entities.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThemeByID", arg0, arg1)
	ret0, _ := ret[0].(entities.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThemeByID indicates an expected call of GetThemeByID.
func (mr *MockThemeRepoImplyMockRecorder) GetThemeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThemeByID", reflect.TypeOf((*MockThemeRepoImply)(nil).GetThemeByID), arg0, arg1)
}
