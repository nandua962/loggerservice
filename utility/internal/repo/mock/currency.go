// Code generated by MockGen. DO NOT EDIT.
// Source: utility/internal/repo (interfaces: CurrencyRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entities "utility/internal/entities"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/tuneverse/toolkit/models"
)

// MockCurrencyRepoImply is a mock of CurrencyRepoImply interface.
type MockCurrencyRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyRepoImplyMockRecorder
}

// MockCurrencyRepoImplyMockRecorder is the mock recorder for MockCurrencyRepoImply.
type MockCurrencyRepoImplyMockRecorder struct {
	mock *MockCurrencyRepoImply
}

// NewMockCurrencyRepoImply creates a new mock instance.
func NewMockCurrencyRepoImply(ctrl *gomock.Controller) *MockCurrencyRepoImply {
	mock := &MockCurrencyRepoImply{ctrl: ctrl}
	mock.recorder = &MockCurrencyRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyRepoImply) EXPECT() *MockCurrencyRepoImplyMockRecorder {
	return m.recorder
}

// GetCurrencies mocks base method.
func (m *MockCurrencyRepoImply) GetCurrencies(arg0 context.Context, arg1 entities.Params, arg2 entities.Pagination, arg3 entities.Validation, arg4 map[string]models.ErrorResponse) ([]entities.Currency, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencies", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]entities.Currency)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCurrencies indicates an expected call of GetCurrencies.
func (mr *MockCurrencyRepoImplyMockRecorder) GetCurrencies(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencies", reflect.TypeOf((*MockCurrencyRepoImply)(nil).GetCurrencies), arg0, arg1, arg2, arg3, arg4)
}

// GetCurrencyByID mocks base method.
func (m *MockCurrencyRepoImply) GetCurrencyByID(arg0 context.Context, arg1 string) (entities.GeographicInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByID", arg0, arg1)
	ret0, _ := ret[0].(entities.GeographicInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByID indicates an expected call of GetCurrencyByID.
func (mr *MockCurrencyRepoImplyMockRecorder) GetCurrencyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByID", reflect.TypeOf((*MockCurrencyRepoImply)(nil).GetCurrencyByID), arg0, arg1)
}

// GetCurrencyByISO mocks base method.
func (m *MockCurrencyRepoImply) GetCurrencyByISO(arg0 context.Context, arg1 string) (entities.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByISO", arg0, arg1)
	ret0, _ := ret[0].(entities.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByISO indicates an expected call of GetCurrencyByISO.
func (mr *MockCurrencyRepoImplyMockRecorder) GetCurrencyByISO(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByISO", reflect.TypeOf((*MockCurrencyRepoImply)(nil).GetCurrencyByISO), arg0, arg1)
}
