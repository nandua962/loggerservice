// Code generated by MockGen. DO NOT EDIT.
// Source: utility/internal/repo (interfaces: LookupRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entities "utility/internal/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockLookupRepoImply is a mock of LookupRepoImply interface.
type MockLookupRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockLookupRepoImplyMockRecorder
}

// MockLookupRepoImplyMockRecorder is the mock recorder for MockLookupRepoImply.
type MockLookupRepoImplyMockRecorder struct {
	mock *MockLookupRepoImply
}

// NewMockLookupRepoImply creates a new mock instance.
func NewMockLookupRepoImply(ctrl *gomock.Controller) *MockLookupRepoImply {
	mock := &MockLookupRepoImply{ctrl: ctrl}
	mock.recorder = &MockLookupRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLookupRepoImply) EXPECT() *MockLookupRepoImplyMockRecorder {
	return m.recorder
}

// GetLookupByIdList mocks base method.
func (m *MockLookupRepoImply) GetLookupByIdList(arg0 context.Context, arg1 entities.LookupIDs) (entities.LookupData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLookupByIdList", arg0, arg1)
	ret0, _ := ret[0].(entities.LookupData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLookupByIdList indicates an expected call of GetLookupByIdList.
func (mr *MockLookupRepoImplyMockRecorder) GetLookupByIdList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLookupByIdList", reflect.TypeOf((*MockLookupRepoImply)(nil).GetLookupByIdList), arg0, arg1)
}

// GetLookupByTypeName mocks base method.
func (m *MockLookupRepoImply) GetLookupByTypeName(arg0 context.Context, arg1 string, arg2 map[string]string) ([]entities.Lookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLookupByTypeName", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.Lookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLookupByTypeName indicates an expected call of GetLookupByTypeName.
func (mr *MockLookupRepoImplyMockRecorder) GetLookupByTypeName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLookupByTypeName", reflect.TypeOf((*MockLookupRepoImply)(nil).GetLookupByTypeName), arg0, arg1, arg2)
}
