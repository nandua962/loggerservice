// Code generated by MockGen. DO NOT EDIT.
// Source: logger/internal/repo (interfaces: LoggerRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "logger/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockLoggerRepoImply is a mock of LoggerRepoImply interface.
type MockLoggerRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerRepoImplyMockRecorder
}

// MockLoggerRepoImplyMockRecorder is the mock recorder for MockLoggerRepoImply.
type MockLoggerRepoImplyMockRecorder struct {
	mock *MockLoggerRepoImply
}

// NewMockLoggerRepoImply creates a new mock instance.
func NewMockLoggerRepoImply(ctrl *gomock.Controller) *MockLoggerRepoImply {
	mock := &MockLoggerRepoImply{ctrl: ctrl}
	mock.recorder = &MockLoggerRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerRepoImply) EXPECT() *MockLoggerRepoImplyMockRecorder {
	return m.recorder
}

// AddLog mocks base method.
func (m *MockLoggerRepoImply) AddLog(arg0 context.Context, arg1 entities.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLog indicates an expected call of AddLog.
func (mr *MockLoggerRepoImplyMockRecorder) AddLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockLoggerRepoImply)(nil).AddLog), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockLoggerRepoImply) GetLogs(arg0 context.Context, arg1 primitive.M, arg2, arg3 int32) ([]*entities.Log, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entities.Log)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockLoggerRepoImplyMockRecorder) GetLogs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockLoggerRepoImply)(nil).GetLogs), arg0, arg1, arg2, arg3)
}
