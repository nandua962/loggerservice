// Code generated by MockGen. DO NOT EDIT.
// Source: partner/internal/repo (interfaces: PartnerRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "partner/internal/entities"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "gitlab.com/tuneverse/toolkit/models"
)

// MockPartnerRepoImply is a mock of PartnerRepoImply interface.
type MockPartnerRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerRepoImplyMockRecorder
}

// MockPartnerRepoImplyMockRecorder is the mock recorder for MockPartnerRepoImply.
type MockPartnerRepoImplyMockRecorder struct {
	mock *MockPartnerRepoImply
}

// NewMockPartnerRepoImply creates a new mock instance.
func NewMockPartnerRepoImply(ctrl *gomock.Controller) *MockPartnerRepoImply {
	mock := &MockPartnerRepoImply{ctrl: ctrl}
	mock.recorder = &MockPartnerRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerRepoImply) EXPECT() *MockPartnerRepoImplyMockRecorder {
	return m.recorder
}

// CreatePartner mocks base method.
func (m *MockPartnerRepoImply) CreatePartner(arg0 context.Context, arg1, arg2 string, arg3 map[string]models.ErrorResponse, arg4 entities.Partner, arg5 entities.PartnerOauthCredential) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartner", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartner indicates an expected call of CreatePartner.
func (mr *MockPartnerRepoImplyMockRecorder) CreatePartner(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartner", reflect.TypeOf((*MockPartnerRepoImply)(nil).CreatePartner), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreatePartnerStores mocks base method.
func (m *MockPartnerRepoImply) CreatePartnerStores(arg0 context.Context, arg1 entities.PartnerStores, arg2, arg3, arg4 string, arg5 map[string]models.ErrorResponse) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartnerStores", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartnerStores indicates an expected call of CreatePartnerStores.
func (mr *MockPartnerRepoImplyMockRecorder) CreatePartnerStores(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnerStores", reflect.TypeOf((*MockPartnerRepoImply)(nil).CreatePartnerStores), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeletePartner mocks base method.
func (m *MockPartnerRepoImply) DeletePartner(arg0 *gin.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartner indicates an expected call of DeletePartner.
func (mr *MockPartnerRepoImplyMockRecorder) DeletePartner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartner", reflect.TypeOf((*MockPartnerRepoImply)(nil).DeletePartner), arg0, arg1)
}

// DeletePartnerArtistRoleLanguage mocks base method.
func (m *MockPartnerRepoImply) DeletePartnerArtistRoleLanguage(arg0 *gin.Context, arg1, arg2, arg3 string, arg4 map[string]models.ErrorResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartnerArtistRoleLanguage", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartnerArtistRoleLanguage indicates an expected call of DeletePartnerArtistRoleLanguage.
func (mr *MockPartnerRepoImplyMockRecorder) DeletePartnerArtistRoleLanguage(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnerArtistRoleLanguage", reflect.TypeOf((*MockPartnerRepoImply)(nil).DeletePartnerArtistRoleLanguage), arg0, arg1, arg2, arg3, arg4)
}

// DeletePartnerGenreLanguage mocks base method.
func (m *MockPartnerRepoImply) DeletePartnerGenreLanguage(arg0 *gin.Context, arg1, arg2, arg3 string, arg4 map[string]models.ErrorResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartnerGenreLanguage", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartnerGenreLanguage indicates an expected call of DeletePartnerGenreLanguage.
func (mr *MockPartnerRepoImplyMockRecorder) DeletePartnerGenreLanguage(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnerGenreLanguage", reflect.TypeOf((*MockPartnerRepoImply)(nil).DeletePartnerGenreLanguage), arg0, arg1, arg2, arg3, arg4)
}

// EncryptPaymentData mocks base method.
func (m *MockPartnerRepoImply) EncryptPaymentData(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptPaymentData", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptPaymentData indicates an expected call of EncryptPaymentData.
func (mr *MockPartnerRepoImplyMockRecorder) EncryptPaymentData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPaymentData", reflect.TypeOf((*MockPartnerRepoImply)(nil).EncryptPaymentData), arg0, arg1)
}

// GetAllPartners mocks base method.
func (m *MockPartnerRepoImply) GetAllPartners(arg0 *gin.Context, arg1 entities.Params, arg2, arg3 string, arg4 map[string]models.ErrorResponse) ([]entities.ListAllPartners, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPartners", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]entities.ListAllPartners)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllPartners indicates an expected call of GetAllPartners.
func (mr *MockPartnerRepoImplyMockRecorder) GetAllPartners(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPartners", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetAllPartners), arg0, arg1, arg2, arg3, arg4)
}

// GetAllTermsAndConditions mocks base method.
func (m *MockPartnerRepoImply) GetAllTermsAndConditions(arg0 context.Context, arg1 string) (entities.TermsAndConditions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTermsAndConditions", arg0, arg1)
	ret0, _ := ret[0].(entities.TermsAndConditions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTermsAndConditions indicates an expected call of GetAllTermsAndConditions.
func (mr *MockPartnerRepoImplyMockRecorder) GetAllTermsAndConditions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTermsAndConditions", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetAllTermsAndConditions), arg0, arg1)
}

// GetID mocks base method.
func (m *MockPartnerRepoImply) GetID(arg0 context.Context, arg1, arg2 string, arg3 interface{}, arg4 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetID indicates an expected call of GetID.
func (mr *MockPartnerRepoImplyMockRecorder) GetID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetID), arg0, arg1, arg2, arg3, arg4)
}

// GetPartnerById mocks base method.
func (m *MockPartnerRepoImply) GetPartnerById(arg0 context.Context, arg1 string) (entities.GetPartner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerById", arg0, arg1)
	ret0, _ := ret[0].(entities.GetPartner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerById indicates an expected call of GetPartnerById.
func (mr *MockPartnerRepoImplyMockRecorder) GetPartnerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerById", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetPartnerById), arg0, arg1)
}

// GetPartnerName mocks base method.
func (m *MockPartnerRepoImply) GetPartnerName(arg0 *gin.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerName indicates an expected call of GetPartnerName.
func (mr *MockPartnerRepoImplyMockRecorder) GetPartnerName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerName", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetPartnerName), arg0, arg1)
}

// GetPartnerOauthCredential mocks base method.
func (m *MockPartnerRepoImply) GetPartnerOauthCredential(arg0 context.Context, arg1 string, arg2 entities.PartnerOAuthHeader, arg3 string) (entities.GetPartnerOauthCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerOauthCredential", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entities.GetPartnerOauthCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerOauthCredential indicates an expected call of GetPartnerOauthCredential.
func (mr *MockPartnerRepoImplyMockRecorder) GetPartnerOauthCredential(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerOauthCredential", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetPartnerOauthCredential), arg0, arg1, arg2, arg3)
}

// GetPartnerPaymentGateways mocks base method.
func (m *MockPartnerRepoImply) GetPartnerPaymentGateways(arg0 *gin.Context, arg1 string) (entities.GetPaymentGateways, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerPaymentGateways", arg0, arg1)
	ret0, _ := ret[0].(entities.GetPaymentGateways)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerPaymentGateways indicates an expected call of GetPartnerPaymentGateways.
func (mr *MockPartnerRepoImplyMockRecorder) GetPartnerPaymentGateways(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerPaymentGateways", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetPartnerPaymentGateways), arg0, arg1)
}

// GetPartnerProductTypes mocks base method.
func (m *MockPartnerRepoImply) GetPartnerProductTypes(arg0 context.Context, arg1 string, arg2 entities.QueryParams) (int64, []entities.GetPartnerProdTypesAndTrackQuality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerProductTypes", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]entities.GetPartnerProdTypesAndTrackQuality)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPartnerProductTypes indicates an expected call of GetPartnerProductTypes.
func (mr *MockPartnerRepoImplyMockRecorder) GetPartnerProductTypes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerProductTypes", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetPartnerProductTypes), arg0, arg1, arg2)
}

// GetPartnerStores mocks base method.
func (m *MockPartnerRepoImply) GetPartnerStores(arg0 context.Context, arg1 string) (entities.GetPartnerStores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerStores", arg0, arg1)
	ret0, _ := ret[0].(entities.GetPartnerStores)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerStores indicates an expected call of GetPartnerStores.
func (mr *MockPartnerRepoImplyMockRecorder) GetPartnerStores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerStores", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetPartnerStores), arg0, arg1)
}

// GetPartnerTrackFileQuality mocks base method.
func (m *MockPartnerRepoImply) GetPartnerTrackFileQuality(arg0 context.Context, arg1 string, arg2 entities.QueryParams) (int64, []entities.GetPartnerProdTypesAndTrackQuality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerTrackFileQuality", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]entities.GetPartnerProdTypesAndTrackQuality)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPartnerTrackFileQuality indicates an expected call of GetPartnerTrackFileQuality.
func (mr *MockPartnerRepoImplyMockRecorder) GetPartnerTrackFileQuality(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerTrackFileQuality", reflect.TypeOf((*MockPartnerRepoImply)(nil).GetPartnerTrackFileQuality), arg0, arg1, arg2)
}

// IsExists mocks base method.
func (m *MockPartnerRepoImply) IsExists(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockPartnerRepoImplyMockRecorder) IsExists(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockPartnerRepoImply)(nil).IsExists), arg0, arg1, arg2, arg3)
}

// IsFieldValueUnique mocks base method.
func (m *MockPartnerRepoImply) IsFieldValueUnique(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFieldValueUnique", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFieldValueUnique indicates an expected call of IsFieldValueUnique.
func (mr *MockPartnerRepoImplyMockRecorder) IsFieldValueUnique(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFieldValueUnique", reflect.TypeOf((*MockPartnerRepoImply)(nil).IsFieldValueUnique), arg0, arg1, arg2, arg3)
}

// IsPartnerExists mocks base method.
func (m *MockPartnerRepoImply) IsPartnerExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPartnerExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPartnerExists indicates an expected call of IsPartnerExists.
func (mr *MockPartnerRepoImplyMockRecorder) IsPartnerExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPartnerExists", reflect.TypeOf((*MockPartnerRepoImply)(nil).IsPartnerExists), arg0, arg1)
}

// UpdatePartner mocks base method.
func (m *MockPartnerRepoImply) UpdatePartner(arg0 context.Context, arg1 string, arg2 uuid.UUID, arg3 *entities.Partner, arg4 *entities.PartnerProperties, arg5, arg6 string, arg7 map[string]models.ErrorResponse) (map[string]models.ErrorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartner", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(map[string]models.ErrorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartner indicates an expected call of UpdatePartner.
func (mr *MockPartnerRepoImplyMockRecorder) UpdatePartner(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartner", reflect.TypeOf((*MockPartnerRepoImply)(nil).UpdatePartner), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// UpdatePartnerStatus mocks base method.
func (m *MockPartnerRepoImply) UpdatePartnerStatus(arg0 *gin.Context, arg1 string, arg2 entities.UpdatePartnerStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartnerStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartnerStatus indicates an expected call of UpdatePartnerStatus.
func (mr *MockPartnerRepoImplyMockRecorder) UpdatePartnerStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnerStatus", reflect.TypeOf((*MockPartnerRepoImply)(nil).UpdatePartnerStatus), arg0, arg1, arg2)
}

// UpdateTermsAndConditions mocks base method.
func (m *MockPartnerRepoImply) UpdateTermsAndConditions(arg0 context.Context, arg1 string, arg2 uuid.UUID, arg3 entities.UpdateTermsAndConditions, arg4, arg5 string, arg6 map[string]models.ErrorResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTermsAndConditions", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTermsAndConditions indicates an expected call of UpdateTermsAndConditions.
func (mr *MockPartnerRepoImplyMockRecorder) UpdateTermsAndConditions(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTermsAndConditions", reflect.TypeOf((*MockPartnerRepoImply)(nil).UpdateTermsAndConditions), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
